;/*!
;   @file
;
;   @brief MouRoute
;
;   (c) osFree Project 2021, <http://www.osFree.org>
;   for licence see licence.txt in root directory, or project website
;
;   This is Family API implementation for DOS and OS/2
;
;   @author Yuri Prokushev (yuri.prokushev@gmail.com)
;
;*/

.8086

		include helpers.inc

;/*!
;   @file
;
;   @ingroup fapi
;
;   @brief Family API implementation
;
;   (c) osFree Project 2021, <http://www.osFree.org>
;   for licence see licence.txt in root directory, or project website
;
;   This is Family API implementation for DOS, used with BIND tools
;   to link required API
;
;   @author Yuri Prokushev (yuri.prokushev@gmail.com)
;
;*/

MR_MOUGETNUMBUTTONS	EQU	00000001H
MR_MOUGETNUMMICKEYS	EQU	00000002H
MR_MOUGETDEVSTATUS	EQU	00000004H
MR_MOUGETNUMQUEEL	EQU	00000008H
MR_MOUREADEVENTQUE	EQU	00000010H
MR_MOUGETSCALEFACT	EQU	00000020H
MR_MOUGETEVENTMASK	EQU	00000040H
MR_MOUSETSCALEFACT	EQU	00000080H
MR_MOUSETEVENTMASK	EQU	00000100H
MR_MOUGETHOTKEY		EQU	00000200H
MR_MOUSETHOTKEY		EQU	00000400H
MR_MOUOPEN		EQU	00000800H
MR_MOUCLOSE		EQU	00001000H
MR_MOUGETPTRSHAPE	EQU	00002000H
MR_MOUSETPTRSHAPE	EQU	00004000H
MR_MOUDRAWPTR		EQU	00008000H

MR_MOUREMOVEPTR		EQU	00010000H
MR_MOUGETPTRPOS		EQU	00020000H
MR_MOUSETPTRPOS		EQU	00040000H
MR_MOUINITREAL		EQU	00080000H
MR_MOUFLUSHQUE		EQU	00100000H
MR_MOUSETDEVSTATUS	EQU	00200000H
MR_MOUFREE			EQU	01000000H		; Not documented, mask set logically, may be incorrect

MI_MOUGETNUMBUTTONS	EQU	00H
MI_MOUGETNUMMICKEYS	EQU	01H
MI_MOUGETDEVSTATUS	EQU	02H
MI_MOUGETNUMQUEEL	EQU	03H
MI_MOUREADEVENTQUE	EQU	04H
MI_MOUGETSCALEFACT	EQU	05H
MI_MOUGETEVENTMASK	EQU	06H
MI_MOUSETSCALEFACT	EQU	07H
MI_MOUSETEVENTMASK	EQU	08H
MI_MOUGETHOTKEY		EQU	09H
MI_MOUSETHOTKEY		EQU	0AH
MI_MOUOPEN		EQU	0BH
MI_MOUCLOSE		EQU	0CH
MI_MOUGETPTRSHAPE	EQU	0DH
MI_MOUSETPTRSHAPE	EQU	0EH
MI_MOUDRAWPTR		EQU	0FH
MI_MOUREMOVEPTR		EQU	10H
MI_MOUGETPTRPOS		EQU	11H
MI_MOUSETPTRPOS		EQU	12H
MI_MOUINITREAL		EQU	13H
MI_MOUFLUSHQUE		EQU	14H
MI_MOUSETDEVSTATUS	EQU	15H
MI_MOUFREE			EQU	18H

;------------------------------------------------------------MOU
@MOUPROLOG	MACRO	NAME


		PUBLIC	NAME

DELTA		=	0

@CATSTR(NAME,MOUARGS)	STRUC
		ENDM

;----------------------------------------------------------------------

@MOUSTART	MACRO	NAME
@CATSTR(NAME,MOUARGS)		ENDS
argsize=SIZE @CATSTR(NAME,MOUARGS)
@CATSTR(NAME,MOU_ARG_SIZE)	EQU	argsize

NAME		PROC	FAR

		ENDM

;------------------------------------------------------------

@MOUEPILOG		MACRO	NAME
			RETF	@CATSTR(NAME,MOU_ARG_SIZE)
NAME		ENDP
		ENDM

;------------------------------------------------------------

@MOUROUTE	MACRO	FUNC, OFF
			MOV	AX, @CATSTR(MI_, FUNC)
			PUSH	AX
			MOV		AX, _DATA
			MOV		ES, AX
			MOV	AX, WORD PTR ES:MOUFUNCTIONMASK+OFF
			IF	OFF EQ 0
			AND	AX, LOWWORD @CATSTR(MR_, FUNC)
			CMP	AX, LOWWORD @CATSTR(MR_, FUNC)
			ELSE
			AND	AX, HIGHWORD @CATSTR(MR_, FUNC)
			CMP	AX, HIGHWORD @CATSTR(MR_, FUNC)
			ENDIF
			CALL    MOUROUTE
			ENDM

;------------------------------------------------------------

@MOUPROC	MACRO	NAME, OFF, ARGS: VARARG

		@MOUPROLOG	NAME
		FOR ARG, <ARGS>
			ARG
		ENDM
		@MOUSTART	NAME
		CALL	@CATSTR(Pre, NAME)
		@MOUROUTE	NAME, OFF
		CALL	@CATSTR(Post, NAME)
		@MOUEPILOG	NAME

			ENDM

_DATA		SEGMENT BYTE PUBLIC 'DATA' USE16

AMSMAIN			DD	?	; AMSMAIN far address
AMSHANDLE		DW	?	; AMSHANDLE module handle
MOUFUNCTIONMASK		DD	0	; MOU FUNCTIONS REDIRECTION MASK

CharStr		DB 'MouRoute',0dh,0ah
CharStr_SIZE     equ     ($ - CharStr)

_DATA		ENDS

EXTERN		BMSMAIN: FAR
EXTERN		VioWrtTTY: FAR

EXTERN	PreMOUCLOSE: PROC
EXTERN	PreMOUDRAWPTR: PROC
EXTERN	PreMOUFLUSHQUE: PROC
EXTERN	PreMOUFREE: PROC
EXTERN	PreMOUGETDEVSTATUS: PROC
EXTERN	PreMOUGETEVENTMASK: PROC
EXTERN	PreMOUGETHOTKEY: PROC
EXTERN	PreMOUGETNUMBUTTONS: PROC
EXTERN	PreMOUGETNUMMICKEYS: PROC
EXTERN	PreMOUGETNUMQUEEL: PROC
EXTERN	PreMOUGETPTRPOS: PROC
EXTERN	PreMOUGETPTRSHAPE: PROC
EXTERN	PreMOUGETSCALEFACT: PROC
EXTERN	PreMOUINITREAL: PROC
EXTERN	PreMOUOPEN: PROC
EXTERN	PreMOUREADEVENTQUE: PROC
EXTERN	PreMOUREMOVEPTR: PROC
EXTERN	PreMOUROUTE: PROC
EXTERN	PreMOUSETDEVSTATUS: PROC
EXTERN	PreMOUSETEVENTMASK: PROC
EXTERN	PreMOUSETHOTKEY: PROC
EXTERN	PreMOUSETPTRPOS: PROC
EXTERN	PreMOUSETPTRSHAPE: PROC
EXTERN	PreMOUSETSCALEFACT: PROC
EXTERN	PreMOUSHELLINIT: PROC
EXTERN	PreMOUSYNCH: PROC
EXTERN	PostMOUCLOSE: PROC
EXTERN	PostMOUDRAWPTR: PROC
EXTERN	PostMOUFLUSHQUE: PROC
EXTERN	PostMOUFREE: PROC
EXTERN	PostMOUGETDEVSTATUS: PROC
EXTERN	PostMOUGETEVENTMASK: PROC
EXTERN	PostMOUGETHOTKEY: PROC
EXTERN	PostMOUGETNUMBUTTONS: PROC
EXTERN	PostMOUGETNUMMICKEYS: PROC
EXTERN	PostMOUGETNUMQUEEL: PROC
EXTERN	PostMOUGETPTRPOS: PROC
EXTERN	PostMOUGETPTRSHAPE: PROC
EXTERN	PostMOUGETSCALEFACT: PROC
EXTERN	PostMOUINITREAL: PROC
EXTERN	PostMOUOPEN: PROC
EXTERN	PostMOUREADEVENTQUE: PROC
EXTERN	PostMOUREMOVEPTR: PROC
EXTERN	PostMOUROUTE: PROC
EXTERN	PostMOUSETDEVSTATUS: PROC
EXTERN	PostMOUSETEVENTMASK: PROC
EXTERN	PostMOUSETHOTKEY: PROC
EXTERN	PostMOUSETPTRPOS: PROC
EXTERN	PostMOUSETPTRSHAPE: PROC
EXTERN	PostMOUSETSCALEFACT: PROC
EXTERN	PostMOUSHELLINIT: PROC
EXTERN	PostMOUSYNCH: PROC


_TEXT		SEGMENT BYTE PUBLIC 'CODE' USE16

@MOUPROC	MOUOPEN, 0, MOUHANDLE DD ?, DRIVERNAME DD ?
@MOUPROC	MOUCLOSE, 0, MOUHANDLE DW ?
@MOUPROC	MOUDRAWPTR, 0, MOUHANDLE DW ?
@MOUPROC	MOUFLUSHQUE, 2, MOUHANDLE DW ?
@MOUPROC	MOUFREE, 2			; !!!! Seems to be incorrect! Function not routed!!!
@MOUPROC	MOUGETDEVSTATUS, 0, MOUHANDLE DW ?, DEVICSTATUS DD ?
@MOUPROC	MOUGETEVENTMASK, 0, MOUHANDLE DW ?, EVENTMASK DD ?
@MOUPROC	MOUGETHOTKEY, 0, MOUHANDLE DW ?, BUTTONMASK DD ?
@MOUPROC	MOUGETNUMBUTTONS, 0, MOUHANDLE DW ?, NUMBEROFBUTTONS DD ?
@MOUPROC	MOUGETNUMMICKEYS, 0, MOUHANDLE DW ?, NUMBEROFMICKEYS DD ?
@MOUPROC	MOUGETNUMQUEEL, 0, MOUHANDLE DW ?, QUEDATARECORD DD ?
@MOUPROC	MOUGETPTRPOS, 2, MOUHANDLE DW ?, PTRPOS DD ?
@MOUPROC	MOUGETPTRSHAPE, 0, MOUHANDLE DW ?, PTRDEFREC DD ?, PTRBUFFER DD ?
@MOUPROC	MOUGETSCALEFACT, 0, MOUHANDLE DW ?, SCALESTRUCT DD ?
@MOUPROC	MOUINITREAL, 2, DRIVERNAME DD ?
@MOUPROC	MOUREADEVENTQUE, 0, MOUHANDLE DW ?, READTYPE DD ?, BUFFER DD ?
@MOUPROC	MOUREMOVEPTR, 2, MOUHANDLE DW ?, PTRAREA DD ?
@MOUPROC	MOUSETDEVSTATUS, 2, HANDLE DW ?, DEVSTATUS DD ?
@MOUPROC	MOUSETEVENTMASK, 0, MOUHANDLE DW ?, EVENTMASK DD ?
@MOUPROC	MOUSETHOTKEY, 0, MOUHANDLE DW ?, BUTTONMASK DD ?
@MOUPROC	MOUSETPTRPOS, 2, MOUHANDLE DW ?, PTRPOS DD ?
@MOUPROC	MOUSETPTRSHAPE, 0, MOUHANDLE DW ?, PTRDEFREC DD ?, PTRBUFFER DD ?
@MOUPROC	MOUSETSCALEFACT, 0, MOUHANDLE DW ?, SCALESTRUCT DD ?

MOUROUTE	PROC	NEAR

		PUSHF
		@PUSHA
		MOV		AX, SEG CHARSTR
		PUSH	AX
		MOV		AX, OFFSET CHARSTR
		PUSH	AX
		MOV		AX,CharStr_SIZE
		PUSH	AX
		MOV		AX,0
		PUSH	AX
		CALL	VioWrtTTY
		@POPA
		POPF

		JNZ	BMS		; Skip if AMS not registered
;Call alternate mouse subsystem if function routed
		PUSH	DS		; caller data segment
		XOR	AX,AX
		MOV	AX, SEG _DATA
		MOV	ES, AX
		CALL	FAR PTR [ES:AMSMAIN]
		POP	DS
; Return code = 0 
;           No error.  Do not invoke the corresponding Base Mouse Subsystem 
;           routine.  Return to caller with Return code = 0. 
; Return code = -1 
;           No error.  Invoke the corresponding Base Mouse Subsystem 
;           routine. Return to caller with Return code = return code from 
;           Base Mouse Subsystem. 
; Return code = error (not 0 or -1) 
;           Do not invoke the corresponding Base Mouse Subsystem routine. 
;           Return to caller with Return code = error. 
		CMP	AX, 0
		JZ	EXIT
		CMP	AX, -1
		JNZ	EXIT
BMS:
		PUSH	DS		; caller data segment
		XOR	AX,AX
		CALL	FAR PTR BMSMAIN
		POP	DS

EXIT:
		PUSHF
		@PUSHA
		MOV		AX, SEG CHARSTR
		PUSH	AX
		MOV		AX, OFFSET CHARSTR
		PUSH	AX
		MOV		AX,CharStr_SIZE
		PUSH	AX
		MOV		AX,0
		PUSH	AX
		CALL	VioWrtTTY
		@POPA
		POPF

		RET	2			; POP function code
MOUROUTE	ENDP

_TEXT		ENDS
		END
